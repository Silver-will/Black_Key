#version 460 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (binding = 0, r11f_g11f_b10f) uniform image2D dstTexture;
layout (binding = 1) uniform sampler2D srcTexture;

layout(push_constant) uniform UpSampleParams
{
	vec2 screenDimensions;
	float filterRadius;
};

void main()
{
	ivec2 imageCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(dstTexture);
	float x = filterRadius;
	float y = filterRadius;

	vec2 texCoord = vec2(imageCoord/screenDimensions);
	vec3 upsample;
	/*
	vec3 e = texture(srcTexture, texCoord).rgb;		
	//Check if current thread ID is within texture 
	if(imageCoord.x < size.x && imageCoord.y < size.y)
	{
		imageStore(dstTexture, imageCoord, vec4(e,0.0f));
	}
	*/	

	if(imageCoord.x < size.x && imageCoord.y < size.y)
	{
		vec3 a = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
		vec3 b = texture(srcTexture, vec2(texCoord.x,     texCoord.y + y)).rgb;
		vec3 c = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;

		vec3 d = texture(srcTexture, vec2(texCoord.x - x, texCoord.y)).rgb;
		vec3 e = texture(srcTexture, vec2(texCoord.x,     texCoord.y)).rgb;
		vec3 f = texture(srcTexture, vec2(texCoord.x + x, texCoord.y)).rgb;

		vec3 g = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
		vec3 h = texture(srcTexture, vec2(texCoord.x,     texCoord.y - y)).rgb;
		vec3 i = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;

		// Apply weighted distribution, by using a 3x3 tent filter:
		//  1   | 1 2 1 |
		// -- * | 2 4 2 |
		// 16   | 1 2 1 |
		upsample = e*4.0;
		upsample += (b+d+f+h)*2.0;
		upsample += (a+c+g+i);
		upsample *= 1.0 / 16.0;

		vec3 srcVal = e;
		vec3 dstVal = (e + upsample) / 2.0f;
		vec3 original_val = imageLoad(dstTexture, imageCoord).rgb;
		dstVal = dstVal + original_val;
		imageStore(dstTexture, imageCoord, vec4(dstVal,1.0f));
	}
}