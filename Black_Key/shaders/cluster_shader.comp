#version 450 core

layout(local_size_x = 1, local_size_x = 1) in;

struct VolumeTileAABB{
	vec4 minPoint;
	vec4 maxPoint;
};

layout (std430,set = 0, binding = 1) buffer clusterAABB{
    VolumeTileAABB cluster[ ];
};

layout (std430,set = 0, binding = 2) buffer screenToView{
    mat4 inverseProjection;
    uvec4 tileSizes;
    uvec2 screenDimensions;
};

vec4 clipToView(vec4 clip);
vec4 screenToView(vec4 screen);
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance);

void main()
{
}

vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance){
    //Because this is a Z based normal this is fixed
    vec3 normal = vec3(0.0, 0.0, 1.0);

    vec3 ab =  B - A;

    //Computing the intersection length for the line and the plane
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);

    //Computing the actual xyz position of the point along the line
    vec3 result = A + t * ab;

    return result;
}

vec4 clipToView(vec4 clip)
{
    vec4 view = inverseProjection * clip;
    
    view /= view.w;

    return view;
}

vec4 screenToView(vec4 screen)
{
    vec2 texCoord = screen.xy / screenDimensions.xy;

    vec4 clip = vec4(vec2(texCoord.x, texCoord.y)* 2.0 - 1.0, screen.z, screen.w);

    return clipToView(clip);
}