#version 460 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (binding = 0, r11f_g11f_b10f) uniform writeonly image2D dstTexture;
layout (binding = 1) uniform sampler2D srcTexture;

layout(push_constant) uniform DownSampleParams
{
	vec2 screenDimensions;
	uint mipLevel;
};

vec3 PowVec3(vec3 v, float p)
{
    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

const float invGamma = 1.0 / 2.2;
vec3 ToSRGB(vec3 v)   { return PowVec3(v, invGamma); }


float sRGBToLuma(vec3 col)
{
    //return dot(col, vec3(0.2126f, 0.7152f, 0.0722f));
	return dot(col, vec3(0.299f, 0.587f, 0.114f));
}

float KarisAverage(vec3 col)
{
	// Formula is 1 / (1 + luma)
	float luma = sRGBToLuma(ToSRGB(col)) * 0.25f;
	return 1.0f / (1.0f + luma);
}

void main()
{
	ivec2 imageCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(dstTexture);

	vec2 texCoord = (imageCoord * 2) /screenDimensions;
	float x = 1.0 / screenDimensions.x;
	float y = 1.0 / screenDimensions.y;
	
	//Check if current thread ID is within texture 
	if(texCoord.x < size.x && texCoord.y < size.y)
	{
		vec3 downsample;

		//Sample 13 texels around current texel
		vec3 a = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y + 2*y)).rgb;
		vec3 b = texture(srcTexture, vec2(texCoord.x,       texCoord.y + 2*y)).rgb;
		vec3 c = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y + 2*y)).rgb;

		vec3 d = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y)).rgb;
		vec3 e = texture(srcTexture, vec2(texCoord.x,       texCoord.y)).rgb;
		vec3 f = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y)).rgb;

		vec3 g = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y - 2*y)).rgb;
		vec3 h = texture(srcTexture, vec2(texCoord.x,       texCoord.y - 2*y)).rgb;
		vec3 i = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y - 2*y)).rgb;

		vec3 j = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
		vec3 k = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;
		vec3 l = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
		vec3 m = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;



		// Check if we need to perform Karis average on each block of 4 samples
	vec3 groups[5];
	switch (mipLevel)
	{
	case 0:
	  // We are writing to mip 0, so we need to apply Karis average to each block
	  // of 4 samples to prevent fireflies (very bright subpixels, leads to pulsating
	  // artifacts).
	  groups[0] = (a+b+d+e) * (0.125f/4.0f);
	  groups[1] = (b+c+e+f) * (0.125f/4.0f);
	  groups[2] = (d+e+g+h) * (0.125f/4.0f);
	  groups[3] = (e+f+h+i) * (0.125f/4.0f);
	  groups[4] = (j+k+l+m) * (0.5f/4.0f);
	  groups[0] *= KarisAverage(groups[0]);
	  groups[1] *= KarisAverage(groups[1]);
	  groups[2] *= KarisAverage(groups[2]);
	  groups[3] *= KarisAverage(groups[3]);
	  groups[4] *= KarisAverage(groups[4]);
	  downsample = groups[0]+groups[1]+groups[2]+groups[3]+groups[4];
	  downsample = max(downsample, 0.0001f);
	  break;
	default:
	  downsample = e*0.125;                // ok
	  downsample += (a+c+g+i)*0.03125;     // ok
	  downsample += (b+d+f+h)*0.0625;      // ok
	  downsample += (j+k+l+m)*0.125;       // ok
	  break;
	}
	imageStore(dstTexture, imageCoord, vec4(downsample, 1.0f));
	}
}